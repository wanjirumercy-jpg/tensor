# -*- coding: utf-8 -*-
"""Basic Neural Network

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lBIyc_N6oCHPR_uOn-BToJDa52C7Jyay

Import Required Libraries
"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

"""Load and Preprocess the Data"""

#Load MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

#Normalize the images to a range of 0 to 1
x_train = x_train / 255.0
x_test = x_test / 255.0

#One-hot encode the labels
y_train = to_categorical(y_train, num_classes=10)
y_test = to_categorical(y_test, num_classes=10)

"""Build the Neural Network Model"""

#Initialize the model
model = Sequential()

#Flatten the input data (28x28 pixels to 1D)
model.add(Flatten(input_shape=(28, 28)))

#Add a dense layer with 128 neurons and ReLU activation
model.add(Dense(128, activation='relu'))

#Add another dense layer with 64 neurons and ReLU activation
model.add(Dense(64, activation='relu'))

#Add the output layer with 10 neurons (one for each digit) and softmax activation
model.add(Dense(10, activation='softmax'))

"""Compile the Model"""

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

"""Train the Model"""

model.fit(x_train, y_train, epochs=5, batch_size=32)

"""Evaluate the Model"""

test_loss, test_acc = model.evaluate(x_test, y_test)
print(f'Test accuracy: {test_acc}')

"""Making Predictions"""

#Use the trained model to make predictions on the test set
predictions = model.predict(x_test)

#Display the first prediction
print(f"Predicted label: {tf.argmax(predictions[0]).numpy ()}, True label: {tf.argmax(y_test[0]).numpy()}")